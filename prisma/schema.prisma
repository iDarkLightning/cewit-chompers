// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(cuid())
  name             String
  email            String
  image            String
  
  hasOnboarded     Boolean        @default(false)
  likes            String[]
  dislikes         String[]

  sessions         Session[]
  oauthAccounts    OauthAccount[]
  ownedRestaurants Restaurant[]

  dietaryRestrictions IngredientOnUser[]

  customer Customer?

  pastOrders PastOrder[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model OauthAccount {
  providerName   String
  providerUserId String
  userId         String
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([providerName, providerUserId])
}

model Customer {
  id      String @id @default(cuid())
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String @unique
  table   Table  @relation(fields: [tableId], references: [id], onDelete: Cascade)
  tableId String

  foods FoodOnCustomer[]
}

model FoodOnCustomer {
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  food       Food     @relation(fields: [foodId], references: [id], onDelete: Cascade)
  foodId     String

  @@id([customerId, foodId])
}

model Restaurant {
  id      String  @id @default(cuid())
  name    String
  slug    String  @unique
  owner   User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String
  menu    Food[]
  tables  Table[]

  pastOrders PastOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Food {
  id          String @id @default(cuid())
  name        String
  price       Float
  description String

  imageKey String?

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String

  ingredients          FoodOnIngredient[]
  customers            FoodOnCustomer[]
  pastOrdersContaining FoodOnPastOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FoodOnIngredient {
  food         Food       @relation(fields: [foodId], references: [id], onDelete: Cascade)
  foodId       String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  ingredientId String

  @@id([foodId, ingredientId])
}

model Ingredient {
  id   String @id @default(cuid())
  name String

  foods FoodOnIngredient[]

  usersWhoCantEat IngredientOnUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IngredientOnUser {
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  ingredientId String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@id([ingredientId, userId])
}

model Table {
  id        String     @id @default(cuid())
  occupied  Boolean    @default(false)
  seats     Int
  customers Customer[]

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PastOrder {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String

  foods FoodOnPastOrder[]

  date DateTime @default(now())
}

model FoodOnPastOrder {
  food        Food      @relation(fields: [foodId], references: [id], onDelete: Cascade)
  foodId      String
  order       PastOrder @relation(fields: [pastOrderId], references: [id], onDelete: Cascade)
  pastOrderId String

  @@id([foodId, pastOrderId])
}
